/* tslint:disable */
/* eslint-disable */
/**
 * Phialka
 * Phialka server REST API
 *
 * The version of the OpenAPI document: MVP v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Attachment } from './Attachment';
import {
    AttachmentFromJSON,
    AttachmentFromJSONTyped,
    AttachmentToJSON,
    AttachmentToJSONTyped,
} from './Attachment';

/**
 * Datamodel with message data
 * 
 * Message is independent entity.
 * In future message can be a part of a channel message or a private message.
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    messageId: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    authorId: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    content?: string | null;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof Message
     */
    attachments?: Array<Attachment> | null;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    replyMessageId?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Message
     */
    updatedAt?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Message
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the Message interface.
 */
export function instanceOfMessage(value: object): value is Message {
    if (!('messageId' in value) || value['messageId'] === undefined) return false;
    if (!('authorId' in value) || value['authorId'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Message {
    if (json == null) {
        return json;
    }
    return {
        
        'messageId': json['message_id'],
        'authorId': json['author_id'],
        'content': json['content'] == null ? undefined : json['content'],
        'attachments': json['attachments'] == null ? undefined : ((json['attachments'] as Array<any>).map(AttachmentFromJSON)),
        'replyMessageId': json['reply_message_id'] == null ? undefined : json['reply_message_id'],
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'createdAt': (new Date(json['created_at'])),
    };
}

export function MessageToJSON(json: any): Message {
    return MessageToJSONTyped(json, false);
}

export function MessageToJSONTyped(value?: Message | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'message_id': value['messageId'],
        'author_id': value['authorId'],
        'content': value['content'],
        'attachments': value['attachments'] == null ? undefined : ((value['attachments'] as Array<any>).map(AttachmentToJSON)),
        'reply_message_id': value['replyMessageId'],
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt'] as any).toISOString().substring(0,10)),
        'created_at': ((value['createdAt']).toISOString()),
    };
}

