/* tslint:disable */
/* eslint-disable */
/**
 * Phialka
 * Phialka server REST API
 *
 * The version of the OpenAPI document: MVP v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Datamodel with server data
 * @export
 * @interface Server
 */
export interface Server {
    /**
     * 
     * @type {string}
     * @memberof Server
     */
    serverId: string;
    /**
     * 
     * @type {string}
     * @memberof Server
     */
    ownerId: string;
    /**
     * 
     * @type {string}
     * @memberof Server
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Server
     */
    description?: string | null;
    /**
     * 
     * @type {any}
     * @memberof Server
     */
    logo?: any | null;
    /**
     * 
     * @type {Date}
     * @memberof Server
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the Server interface.
 */
export function instanceOfServer(value: object): value is Server {
    if (!('serverId' in value) || value['serverId'] === undefined) return false;
    if (!('ownerId' in value) || value['ownerId'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function ServerFromJSON(json: any): Server {
    return ServerFromJSONTyped(json, false);
}

export function ServerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Server {
    if (json == null) {
        return json;
    }
    return {
        
        'serverId': json['server_id'],
        'ownerId': json['owner_id'],
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'logo': json['logo'] == null ? undefined : json['logo'],
        'createdAt': (new Date(json['created_at'])),
    };
}

export function ServerToJSON(json: any): Server {
    return ServerToJSONTyped(json, false);
}

export function ServerToJSONTyped(value?: Server | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'server_id': value['serverId'],
        'owner_id': value['ownerId'],
        'title': value['title'],
        'description': value['description'],
        'logo': value['logo'],
        'created_at': ((value['createdAt']).toISOString()),
    };
}

