/* tslint:disable */
/* eslint-disable */
/**
 * Phialka
 * Phialka server REST API
 *
 * The version of the OpenAPI document: MVP v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
    MessageToJSONTyped,
} from './Message';

/**
 * Dataclass with channel message data
 * 
 * *sequence is a serial number of the message in the private chat
 * @export
 * @interface PrivateMessage
 */
export interface PrivateMessage {
    /**
     * 
     * @type {Message}
     * @memberof PrivateMessage
     */
    message: Message;
    /**
     * 
     * @type {string}
     * @memberof PrivateMessage
     */
    chatId: string;
    /**
     * 
     * @type {number}
     * @memberof PrivateMessage
     */
    sequence: number;
}

/**
 * Check if a given object implements the PrivateMessage interface.
 */
export function instanceOfPrivateMessage(value: object): value is PrivateMessage {
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('chatId' in value) || value['chatId'] === undefined) return false;
    if (!('sequence' in value) || value['sequence'] === undefined) return false;
    return true;
}

export function PrivateMessageFromJSON(json: any): PrivateMessage {
    return PrivateMessageFromJSONTyped(json, false);
}

export function PrivateMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): PrivateMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'message': MessageFromJSON(json['message']),
        'chatId': json['chat_id'],
        'sequence': json['sequence'],
    };
}

export function PrivateMessageToJSON(json: any): PrivateMessage {
    return PrivateMessageToJSONTyped(json, false);
}

export function PrivateMessageToJSONTyped(value?: PrivateMessage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'message': MessageToJSON(value['message']),
        'chat_id': value['chatId'],
        'sequence': value['sequence'],
    };
}

