/* tslint:disable */
/* eslint-disable */
/**
 * Phialka
 * Phialka server REST API
 *
 * The version of the OpenAPI document: MVP v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Datamodel with file data
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    fileId: string;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    downloadId: string;
    /**
     * 
     * @type {number}
     * @memberof ModelFile
     */
    size: number;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    hash: string;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    mimeType: string;
    /**
     * 
     * @type {Date}
     * @memberof ModelFile
     */
    uploadAt: Date;
}

/**
 * Check if a given object implements the ModelFile interface.
 */
export function instanceOfModelFile(value: object): value is ModelFile {
    if (!('fileId' in value) || value['fileId'] === undefined) return false;
    if (!('downloadId' in value) || value['downloadId'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('hash' in value) || value['hash'] === undefined) return false;
    if (!('mimeType' in value) || value['mimeType'] === undefined) return false;
    if (!('uploadAt' in value) || value['uploadAt'] === undefined) return false;
    return true;
}

export function ModelFileFromJSON(json: any): ModelFile {
    return ModelFileFromJSONTyped(json, false);
}

export function ModelFileFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelFile {
    if (json == null) {
        return json;
    }
    return {
        
        'fileId': json['file_id'],
        'downloadId': json['download_id'],
        'size': json['size'],
        'hash': json['hash'],
        'mimeType': json['mime_type'],
        'uploadAt': (new Date(json['upload_at'])),
    };
}

export function ModelFileToJSON(json: any): ModelFile {
    return ModelFileToJSONTyped(json, false);
}

export function ModelFileToJSONTyped(value?: ModelFile | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'file_id': value['fileId'],
        'download_id': value['downloadId'],
        'size': value['size'],
        'hash': value['hash'],
        'mime_type': value['mimeType'],
        'upload_at': ((value['uploadAt']).toISOString()),
    };
}

