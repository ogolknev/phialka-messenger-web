/* tslint:disable */
/* eslint-disable */
/**
 * Phialka
 * Phialka server REST API
 *
 * The version of the OpenAPI document: MVP v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  MessageCreate,
  User,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MessageCreateFromJSON,
    MessageCreateToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface GetUserByIdUsersUserIdGetRequest {
    userId: string;
}

export interface GetUsersByQueryUsersSearchGetRequest {
    prompt: string;
    count?: number | null;
    offset?: number | null;
}

export interface SendMessageToUserUsersUserIdSendMessagePostRequest {
    userId: string;
    messageCreate: MessageCreate;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Получить профиль пользователя по его user_id
     */
    async getUserByIdUsersUserIdGetRaw(requestParameters: GetUserByIdUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserByIdUsersUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Получить профиль пользователя по его user_id
     */
    async getUserByIdUsersUserIdGet(requestParameters: GetUserByIdUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserByIdUsersUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Найти пользователя по запросу
     */
    async getUsersByQueryUsersSearchGetRaw(requestParameters: GetUsersByQueryUsersSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        if (requestParameters['prompt'] == null) {
            throw new runtime.RequiredError(
                'prompt',
                'Required parameter "prompt" was null or undefined when calling getUsersByQueryUsersSearchGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['prompt'] != null) {
            queryParameters['prompt'] = requestParameters['prompt'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * Найти пользователя по запросу
     */
    async getUsersByQueryUsersSearchGet(requestParameters: GetUsersByQueryUsersSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.getUsersByQueryUsersSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Отправить сообщение пользователю
     */
    async sendMessageToUserUsersUserIdSendMessagePostRaw(requestParameters: SendMessageToUserUsersUserIdSendMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling sendMessageToUserUsersUserIdSendMessagePost().'
            );
        }

        if (requestParameters['messageCreate'] == null) {
            throw new runtime.RequiredError(
                'messageCreate',
                'Required parameter "messageCreate" was null or undefined when calling sendMessageToUserUsersUserIdSendMessagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{user_id}/sendMessage`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageCreateToJSON(requestParameters['messageCreate']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Отправить сообщение пользователю
     */
    async sendMessageToUserUsersUserIdSendMessagePost(requestParameters: SendMessageToUserUsersUserIdSendMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.sendMessageToUserUsersUserIdSendMessagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
