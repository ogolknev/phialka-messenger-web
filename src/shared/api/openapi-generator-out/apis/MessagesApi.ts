/* tslint:disable */
/* eslint-disable */
/**
 * Phialka
 * Phialka server REST API
 *
 * The version of the OpenAPI document: MVP v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChannelMessage,
  HTTPValidationError,
  Message,
  MessageCreate,
  MessageUpdate,
  PrivateMessage,
} from '../models/index';
import {
    ChannelMessageFromJSON,
    ChannelMessageToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MessageFromJSON,
    MessageToJSON,
    MessageCreateFromJSON,
    MessageCreateToJSON,
    MessageUpdateFromJSON,
    MessageUpdateToJSON,
    PrivateMessageFromJSON,
    PrivateMessageToJSON,
} from '../models/index';

export interface DeleteMessageByIdMessagesMessageIdDeleteRequest {
    messageId: string;
}

export interface EditMessageByIdMessagesMessageIdPatchRequest {
    messageId: string;
    messageUpdate: MessageUpdate;
}

export interface GetMessageByIdMessagesMessageIdGetRequest {
    messageId: string;
}

export interface GetMessagesFromChatChannelsChannelIdMessagesGetRequest {
    channelId: string;
    sequence: number;
    count?: number | null;
}

export interface GetMessagesFromChatPrivateChatIdMessagesGetRequest {
    chatId: string;
    sequence: number;
    count?: number | null;
}

export interface SendMessageToChannelChannelsChannelIdSendMessagePostRequest {
    channelId: string;
    messageCreate: MessageCreate;
}

export interface SendMessageToUserUsersUserIdSendMessagePostRequest {
    userId: string;
    messageCreate: MessageCreate;
}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI {

    /**
     * Удалить сообщение по ID
     */
    async deleteMessageByIdMessagesMessageIdDeleteRaw(requestParameters: DeleteMessageByIdMessagesMessageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling deleteMessageByIdMessagesMessageIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messages/{message_id}`.replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters['messageId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Удалить сообщение по ID
     */
    async deleteMessageByIdMessagesMessageIdDelete(requestParameters: DeleteMessageByIdMessagesMessageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteMessageByIdMessagesMessageIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Редактировать сообщение по ID
     */
    async editMessageByIdMessagesMessageIdPatchRaw(requestParameters: EditMessageByIdMessagesMessageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling editMessageByIdMessagesMessageIdPatch().'
            );
        }

        if (requestParameters['messageUpdate'] == null) {
            throw new runtime.RequiredError(
                'messageUpdate',
                'Required parameter "messageUpdate" was null or undefined when calling editMessageByIdMessagesMessageIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/messages/{message_id}`.replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters['messageId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MessageUpdateToJSON(requestParameters['messageUpdate']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Редактировать сообщение по ID
     */
    async editMessageByIdMessagesMessageIdPatch(requestParameters: EditMessageByIdMessagesMessageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.editMessageByIdMessagesMessageIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить сообщение по ID
     */
    async getMessageByIdMessagesMessageIdGetRaw(requestParameters: GetMessageByIdMessagesMessageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling getMessageByIdMessagesMessageIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messages/{message_id}`.replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters['messageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Получить сообщение по ID
     */
    async getMessageByIdMessagesMessageIdGet(requestParameters: GetMessageByIdMessagesMessageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.getMessageByIdMessagesMessageIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить веб-сокет для приёма новых сообщений
     */
    async getMessageWsMessagesGetWSGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messages/getWS`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Получить веб-сокет для приёма новых сообщений
     */
    async getMessageWsMessagesGetWSGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getMessageWsMessagesGetWSGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Получить сообщения из текстового канала
     */
    async getMessagesFromChatChannelsChannelIdMessagesGetRaw(requestParameters: GetMessagesFromChatChannelsChannelIdMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChannelMessage>>> {
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError(
                'channelId',
                'Required parameter "channelId" was null or undefined when calling getMessagesFromChatChannelsChannelIdMessagesGet().'
            );
        }

        if (requestParameters['sequence'] == null) {
            throw new runtime.RequiredError(
                'sequence',
                'Required parameter "sequence" was null or undefined when calling getMessagesFromChatChannelsChannelIdMessagesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sequence'] != null) {
            queryParameters['sequence'] = requestParameters['sequence'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/channels/{channel_id}/messages`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters['channelId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChannelMessageFromJSON));
    }

    /**
     * Получить сообщения из текстового канала
     */
    async getMessagesFromChatChannelsChannelIdMessagesGet(requestParameters: GetMessagesFromChatChannelsChannelIdMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChannelMessage>> {
        const response = await this.getMessagesFromChatChannelsChannelIdMessagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить сообщения из приватного чата
     */
    async getMessagesFromChatPrivateChatIdMessagesGetRaw(requestParameters: GetMessagesFromChatPrivateChatIdMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateMessage>>> {
        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling getMessagesFromChatPrivateChatIdMessagesGet().'
            );
        }

        if (requestParameters['sequence'] == null) {
            throw new runtime.RequiredError(
                'sequence',
                'Required parameter "sequence" was null or undefined when calling getMessagesFromChatPrivateChatIdMessagesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sequence'] != null) {
            queryParameters['sequence'] = requestParameters['sequence'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/private/{chat_id}/messages`.replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters['chatId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PrivateMessageFromJSON));
    }

    /**
     * Получить сообщения из приватного чата
     */
    async getMessagesFromChatPrivateChatIdMessagesGet(requestParameters: GetMessagesFromChatPrivateChatIdMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateMessage>> {
        const response = await this.getMessagesFromChatPrivateChatIdMessagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Отправить сообщение в текстовый канал
     */
    async sendMessageToChannelChannelsChannelIdSendMessagePostRaw(requestParameters: SendMessageToChannelChannelsChannelIdSendMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError(
                'channelId',
                'Required parameter "channelId" was null or undefined when calling sendMessageToChannelChannelsChannelIdSendMessagePost().'
            );
        }

        if (requestParameters['messageCreate'] == null) {
            throw new runtime.RequiredError(
                'messageCreate',
                'Required parameter "messageCreate" was null or undefined when calling sendMessageToChannelChannelsChannelIdSendMessagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/channels/{channel_id}/sendMessage`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters['channelId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageCreateToJSON(requestParameters['messageCreate']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Отправить сообщение в текстовый канал
     */
    async sendMessageToChannelChannelsChannelIdSendMessagePost(requestParameters: SendMessageToChannelChannelsChannelIdSendMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.sendMessageToChannelChannelsChannelIdSendMessagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Отправить сообщение пользователю
     */
    async sendMessageToUserUsersUserIdSendMessagePostRaw(requestParameters: SendMessageToUserUsersUserIdSendMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling sendMessageToUserUsersUserIdSendMessagePost().'
            );
        }

        if (requestParameters['messageCreate'] == null) {
            throw new runtime.RequiredError(
                'messageCreate',
                'Required parameter "messageCreate" was null or undefined when calling sendMessageToUserUsersUserIdSendMessagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{user_id}/sendMessage`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageCreateToJSON(requestParameters['messageCreate']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Отправить сообщение пользователю
     */
    async sendMessageToUserUsersUserIdSendMessagePost(requestParameters: SendMessageToUserUsersUserIdSendMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.sendMessageToUserUsersUserIdSendMessagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
