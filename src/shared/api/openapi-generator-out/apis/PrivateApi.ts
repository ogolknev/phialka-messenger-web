/* tslint:disable */
/* eslint-disable */
/**
 * Phialka
 * Phialka server REST API
 *
 * The version of the OpenAPI document: MVP v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PrivateChat,
  PrivateMessage,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PrivateChatFromJSON,
    PrivateChatToJSON,
    PrivateMessageFromJSON,
    PrivateMessageToJSON,
} from '../models/index';

export interface DeleteChatByIdPrivateChatIdDeleteRequest {
    chatId: string;
}

export interface GetChatByIdPrivateChatIdGetRequest {
    chatId: string;
}

export interface GetMessagesFromChatPrivateChatIdMessagesGetRequest {
    chatId: string;
    sequence: number;
    count?: number | null;
}

/**
 * 
 */
export class PrivateApi extends runtime.BaseAPI {

    /**
     * Удалить приватный чат
     */
    async deleteChatByIdPrivateChatIdDeleteRaw(requestParameters: DeleteChatByIdPrivateChatIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling deleteChatByIdPrivateChatIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/private/{chat_id}`.replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters['chatId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Удалить приватный чат
     */
    async deleteChatByIdPrivateChatIdDelete(requestParameters: DeleteChatByIdPrivateChatIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteChatByIdPrivateChatIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить информацию о приватном чате
     */
    async getChatByIdPrivateChatIdGetRaw(requestParameters: GetChatByIdPrivateChatIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateChat>> {
        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling getChatByIdPrivateChatIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/private/{chat_id}`.replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters['chatId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateChatFromJSON(jsonValue));
    }

    /**
     * Получить информацию о приватном чате
     */
    async getChatByIdPrivateChatIdGet(requestParameters: GetChatByIdPrivateChatIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateChat> {
        const response = await this.getChatByIdPrivateChatIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить сообщения из приватного чата
     */
    async getMessagesFromChatPrivateChatIdMessagesGetRaw(requestParameters: GetMessagesFromChatPrivateChatIdMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateMessage>>> {
        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling getMessagesFromChatPrivateChatIdMessagesGet().'
            );
        }

        if (requestParameters['sequence'] == null) {
            throw new runtime.RequiredError(
                'sequence',
                'Required parameter "sequence" was null or undefined when calling getMessagesFromChatPrivateChatIdMessagesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sequence'] != null) {
            queryParameters['sequence'] = requestParameters['sequence'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/private/{chat_id}/messages`.replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters['chatId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PrivateMessageFromJSON));
    }

    /**
     * Получить сообщения из приватного чата
     */
    async getMessagesFromChatPrivateChatIdMessagesGet(requestParameters: GetMessagesFromChatPrivateChatIdMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateMessage>> {
        const response = await this.getMessagesFromChatPrivateChatIdMessagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить список своих приватных чатов
     */
    async getMyChatsPrivateGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateChat>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/private`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PrivateChatFromJSON));
    }

    /**
     * Получить список своих приватных чатов
     */
    async getMyChatsPrivateGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateChat>> {
        const response = await this.getMyChatsPrivateGetRaw(initOverrides);
        return await response.value();
    }

}
