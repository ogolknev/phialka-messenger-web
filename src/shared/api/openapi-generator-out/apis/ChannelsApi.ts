/* tslint:disable */
/* eslint-disable */
/**
 * Phialka
 * Phialka server REST API
 *
 * The version of the OpenAPI document: MVP v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Channel,
  ChannelCreate,
  ChannelMessage,
  ChannelUpdate,
  HTTPValidationError,
  MessageCreate,
} from '../models/index';
import {
    ChannelFromJSON,
    ChannelToJSON,
    ChannelCreateFromJSON,
    ChannelCreateToJSON,
    ChannelMessageFromJSON,
    ChannelMessageToJSON,
    ChannelUpdateFromJSON,
    ChannelUpdateToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MessageCreateFromJSON,
    MessageCreateToJSON,
} from '../models/index';

export interface CreateChannelChannelsPostRequest {
    channelCreate: ChannelCreate;
}

export interface DeleteChannelChannelsChannelIdDeleteRequest {
    channelId: string;
}

export interface DeleteChannelLogoChannelsChannelIdLogoDeleteRequest {
    channelId: string;
}

export interface EditChannelChannelsChannelIdPatchRequest {
    channelId: string;
    channelUpdate: ChannelUpdate;
}

export interface GetChannelInfoChannelsChannelIdGetRequest {
    channelId: string;
}

export interface GetMessagesFromChatChannelsChannelIdMessagesGetRequest {
    channelId: string;
    sequence: number;
    count?: number | null;
}

export interface SendMessageToChannelChannelsChannelIdSendMessagePostRequest {
    channelId: string;
    messageCreate: MessageCreate;
}

export interface SetChannelLogoChannelsChannelIdLogoPutRequest {
    channelId: string;
    logo: Blob;
}

/**
 * 
 */
export class ChannelsApi extends runtime.BaseAPI {

    /**
     * Создать текстовый канал
     */
    async createChannelChannelsPostRaw(requestParameters: CreateChannelChannelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['channelCreate'] == null) {
            throw new runtime.RequiredError(
                'channelCreate',
                'Required parameter "channelCreate" was null or undefined when calling createChannelChannelsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/channels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelCreateToJSON(requestParameters['channelCreate']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Создать текстовый канал
     */
    async createChannelChannelsPost(requestParameters: CreateChannelChannelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createChannelChannelsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удалить текстовый канал
     */
    async deleteChannelChannelsChannelIdDeleteRaw(requestParameters: DeleteChannelChannelsChannelIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError(
                'channelId',
                'Required parameter "channelId" was null or undefined when calling deleteChannelChannelsChannelIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/channels/{channel_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters['channelId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Удалить текстовый канал
     */
    async deleteChannelChannelsChannelIdDelete(requestParameters: DeleteChannelChannelsChannelIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteChannelChannelsChannelIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удалить логотип канала
     */
    async deleteChannelLogoChannelsChannelIdLogoDeleteRaw(requestParameters: DeleteChannelLogoChannelsChannelIdLogoDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError(
                'channelId',
                'Required parameter "channelId" was null or undefined when calling deleteChannelLogoChannelsChannelIdLogoDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/channels/{channel_id}/logo`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters['channelId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Удалить логотип канала
     */
    async deleteChannelLogoChannelsChannelIdLogoDelete(requestParameters: DeleteChannelLogoChannelsChannelIdLogoDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteChannelLogoChannelsChannelIdLogoDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Редактировать текстовый канал
     */
    async editChannelChannelsChannelIdPatchRaw(requestParameters: EditChannelChannelsChannelIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError(
                'channelId',
                'Required parameter "channelId" was null or undefined when calling editChannelChannelsChannelIdPatch().'
            );
        }

        if (requestParameters['channelUpdate'] == null) {
            throw new runtime.RequiredError(
                'channelUpdate',
                'Required parameter "channelUpdate" was null or undefined when calling editChannelChannelsChannelIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/channels/{channel_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters['channelId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelUpdateToJSON(requestParameters['channelUpdate']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Редактировать текстовый канал
     */
    async editChannelChannelsChannelIdPatch(requestParameters: EditChannelChannelsChannelIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.editChannelChannelsChannelIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить информацию о текстовом канале
     */
    async getChannelInfoChannelsChannelIdGetRaw(requestParameters: GetChannelInfoChannelsChannelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channel>> {
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError(
                'channelId',
                'Required parameter "channelId" was null or undefined when calling getChannelInfoChannelsChannelIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/channels/{channel_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters['channelId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelFromJSON(jsonValue));
    }

    /**
     * Получить информацию о текстовом канале
     */
    async getChannelInfoChannelsChannelIdGet(requestParameters: GetChannelInfoChannelsChannelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channel> {
        const response = await this.getChannelInfoChannelsChannelIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить сообщения из текстового канала
     */
    async getMessagesFromChatChannelsChannelIdMessagesGetRaw(requestParameters: GetMessagesFromChatChannelsChannelIdMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChannelMessage>>> {
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError(
                'channelId',
                'Required parameter "channelId" was null or undefined when calling getMessagesFromChatChannelsChannelIdMessagesGet().'
            );
        }

        if (requestParameters['sequence'] == null) {
            throw new runtime.RequiredError(
                'sequence',
                'Required parameter "sequence" was null or undefined when calling getMessagesFromChatChannelsChannelIdMessagesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sequence'] != null) {
            queryParameters['sequence'] = requestParameters['sequence'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/channels/{channel_id}/messages`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters['channelId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChannelMessageFromJSON));
    }

    /**
     * Получить сообщения из текстового канала
     */
    async getMessagesFromChatChannelsChannelIdMessagesGet(requestParameters: GetMessagesFromChatChannelsChannelIdMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChannelMessage>> {
        const response = await this.getMessagesFromChatChannelsChannelIdMessagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Отправить сообщение в текстовый канал
     */
    async sendMessageToChannelChannelsChannelIdSendMessagePostRaw(requestParameters: SendMessageToChannelChannelsChannelIdSendMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError(
                'channelId',
                'Required parameter "channelId" was null or undefined when calling sendMessageToChannelChannelsChannelIdSendMessagePost().'
            );
        }

        if (requestParameters['messageCreate'] == null) {
            throw new runtime.RequiredError(
                'messageCreate',
                'Required parameter "messageCreate" was null or undefined when calling sendMessageToChannelChannelsChannelIdSendMessagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/channels/{channel_id}/sendMessage`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters['channelId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageCreateToJSON(requestParameters['messageCreate']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Отправить сообщение в текстовый канал
     */
    async sendMessageToChannelChannelsChannelIdSendMessagePost(requestParameters: SendMessageToChannelChannelsChannelIdSendMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.sendMessageToChannelChannelsChannelIdSendMessagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Установить логотип канала
     */
    async setChannelLogoChannelsChannelIdLogoPutRaw(requestParameters: SetChannelLogoChannelsChannelIdLogoPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['channelId'] == null) {
            throw new runtime.RequiredError(
                'channelId',
                'Required parameter "channelId" was null or undefined when calling setChannelLogoChannelsChannelIdLogoPut().'
            );
        }

        if (requestParameters['logo'] == null) {
            throw new runtime.RequiredError(
                'logo',
                'Required parameter "logo" was null or undefined when calling setChannelLogoChannelsChannelIdLogoPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['logo'] != null) {
            formParams.append('logo', requestParameters['logo'] as any);
        }

        const response = await this.request({
            path: `/channels/{channel_id}/logo`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters['channelId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Установить логотип канала
     */
    async setChannelLogoChannelsChannelIdLogoPut(requestParameters: SetChannelLogoChannelsChannelIdLogoPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setChannelLogoChannelsChannelIdLogoPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
