/* tslint:disable */
/* eslint-disable */
/**
 * Phialka
 * Phialka server REST API
 *
 * The version of the OpenAPI document: MVP v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Channel,
  HTTPValidationError,
  Server,
  ServerCreate,
  ServerUpdate,
  User,
  UserInvite,
} from '../models/index';
import {
    ChannelFromJSON,
    ChannelToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ServerFromJSON,
    ServerToJSON,
    ServerCreateFromJSON,
    ServerCreateToJSON,
    ServerUpdateFromJSON,
    ServerUpdateToJSON,
    UserFromJSON,
    UserToJSON,
    UserInviteFromJSON,
    UserInviteToJSON,
} from '../models/index';

export interface CreateServerServersPostRequest {
    serverCreate: ServerCreate;
}

export interface DeleteServerLogoServersServerIdLogoDeleteRequest {
    serverId: string;
}

export interface DeleteServerServersServerIdDeleteRequest {
    serverId: string;
}

export interface EditServerServersServerIdPatchRequest {
    serverId: string;
    serverUpdate: ServerUpdate;
}

export interface GetServerChannelsServersServerIdGetChannelsGetRequest {
    serverId: string;
}

export interface GetServerInfoServersServerIdGetRequest {
    serverId: string;
}

export interface GetServerMembersServersServerIdGetMembersGetRequest {
    serverId: string;
}

export interface InviteUserToChannelServersServerIdInvitePostRequest {
    serverId: string;
    userInvite: UserInvite;
}

export interface JoinToChannelServersServerIdJoinPostRequest {
    serverId: string;
}

export interface SearchServerServersSearchGetRequest {
    prompt: string;
    offset?: number | null;
    count?: number | null;
}

export interface SetServerLogoServersServerIdLogoPutRequest {
    serverId: string;
    logo: Blob;
}

/**
 * 
 */
export class ServersApi extends runtime.BaseAPI {

    /**
     * Создать сервер
     */
    async createServerServersPostRaw(requestParameters: CreateServerServersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['serverCreate'] == null) {
            throw new runtime.RequiredError(
                'serverCreate',
                'Required parameter "serverCreate" was null or undefined when calling createServerServersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/servers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServerCreateToJSON(requestParameters['serverCreate']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Создать сервер
     */
    async createServerServersPost(requestParameters: CreateServerServersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createServerServersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удалить логотип сервера
     */
    async deleteServerLogoServersServerIdLogoDeleteRaw(requestParameters: DeleteServerLogoServersServerIdLogoDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling deleteServerLogoServersServerIdLogoDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/servers/{server_id}/logo`.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Удалить логотип сервера
     */
    async deleteServerLogoServersServerIdLogoDelete(requestParameters: DeleteServerLogoServersServerIdLogoDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteServerLogoServersServerIdLogoDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удалить сервер
     */
    async deleteServerServersServerIdDeleteRaw(requestParameters: DeleteServerServersServerIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling deleteServerServersServerIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/servers/{server_id}`.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Удалить сервер
     */
    async deleteServerServersServerIdDelete(requestParameters: DeleteServerServersServerIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteServerServersServerIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Редактировать сервер
     */
    async editServerServersServerIdPatchRaw(requestParameters: EditServerServersServerIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling editServerServersServerIdPatch().'
            );
        }

        if (requestParameters['serverUpdate'] == null) {
            throw new runtime.RequiredError(
                'serverUpdate',
                'Required parameter "serverUpdate" was null or undefined when calling editServerServersServerIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/servers/{server_id}`.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ServerUpdateToJSON(requestParameters['serverUpdate']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Редактировать сервер
     */
    async editServerServersServerIdPatch(requestParameters: EditServerServersServerIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.editServerServersServerIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить список серверов, в которых состоит текущий пользователь
     */
    async getMyServersServersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Server>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/servers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServerFromJSON));
    }

    /**
     * Получить список серверов, в которых состоит текущий пользователь
     */
    async getMyServersServersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Server>> {
        const response = await this.getMyServersServersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Получить список текстовых каналов на сервере
     */
    async getServerChannelsServersServerIdGetChannelsGetRaw(requestParameters: GetServerChannelsServersServerIdGetChannelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Channel>>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling getServerChannelsServersServerIdGetChannelsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/servers/{server_id}/getChannels`.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChannelFromJSON));
    }

    /**
     * Получить список текстовых каналов на сервере
     */
    async getServerChannelsServersServerIdGetChannelsGet(requestParameters: GetServerChannelsServersServerIdGetChannelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Channel>> {
        const response = await this.getServerChannelsServersServerIdGetChannelsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить информацию о сервере
     */
    async getServerInfoServersServerIdGetRaw(requestParameters: GetServerInfoServersServerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Server>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling getServerInfoServersServerIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/servers/{server_id}`.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerFromJSON(jsonValue));
    }

    /**
     * Получить информацию о сервере
     */
    async getServerInfoServersServerIdGet(requestParameters: GetServerInfoServersServerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Server> {
        const response = await this.getServerInfoServersServerIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить список пользователей сервера
     */
    async getServerMembersServersServerIdGetMembersGetRaw(requestParameters: GetServerMembersServersServerIdGetMembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling getServerMembersServersServerIdGetMembersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/servers/{server_id}/getMembers`.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * Получить список пользователей сервера
     */
    async getServerMembersServersServerIdGetMembersGet(requestParameters: GetServerMembersServersServerIdGetMembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.getServerMembersServersServerIdGetMembersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Пригласить пользователя на сервер
     */
    async inviteUserToChannelServersServerIdInvitePostRaw(requestParameters: InviteUserToChannelServersServerIdInvitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling inviteUserToChannelServersServerIdInvitePost().'
            );
        }

        if (requestParameters['userInvite'] == null) {
            throw new runtime.RequiredError(
                'userInvite',
                'Required parameter "userInvite" was null or undefined when calling inviteUserToChannelServersServerIdInvitePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/servers/{server_id}/invite`.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserInviteToJSON(requestParameters['userInvite']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Пригласить пользователя на сервер
     */
    async inviteUserToChannelServersServerIdInvitePost(requestParameters: InviteUserToChannelServersServerIdInvitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.inviteUserToChannelServersServerIdInvitePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Присоединиться к серверу
     */
    async joinToChannelServersServerIdJoinPostRaw(requestParameters: JoinToChannelServersServerIdJoinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling joinToChannelServersServerIdJoinPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/servers/{server_id}/join`.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Присоединиться к серверу
     */
    async joinToChannelServersServerIdJoinPost(requestParameters: JoinToChannelServersServerIdJoinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.joinToChannelServersServerIdJoinPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Поиск серверов по запросу
     */
    async searchServerServersSearchGetRaw(requestParameters: SearchServerServersSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Server>>> {
        if (requestParameters['prompt'] == null) {
            throw new runtime.RequiredError(
                'prompt',
                'Required parameter "prompt" was null or undefined when calling searchServerServersSearchGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['prompt'] != null) {
            queryParameters['prompt'] = requestParameters['prompt'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/servers/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServerFromJSON));
    }

    /**
     * Поиск серверов по запросу
     */
    async searchServerServersSearchGet(requestParameters: SearchServerServersSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Server>> {
        const response = await this.searchServerServersSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Установить логотип сервера
     */
    async setServerLogoServersServerIdLogoPutRaw(requestParameters: SetServerLogoServersServerIdLogoPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling setServerLogoServersServerIdLogoPut().'
            );
        }

        if (requestParameters['logo'] == null) {
            throw new runtime.RequiredError(
                'logo',
                'Required parameter "logo" was null or undefined when calling setServerLogoServersServerIdLogoPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['logo'] != null) {
            formParams.append('logo', requestParameters['logo'] as any);
        }

        const response = await this.request({
            path: `/servers/{server_id}/logo`.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Установить логотип сервера
     */
    async setServerLogoServersServerIdLogoPut(requestParameters: SetServerLogoServersServerIdLogoPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setServerLogoServersServerIdLogoPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
