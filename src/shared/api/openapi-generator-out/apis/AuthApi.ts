/* tslint:disable */
/* eslint-disable */
/**
 * Phialka
 * Phialka server REST API
 *
 * The version of the OpenAPI document: MVP v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthDataBasic,
  AuthDataRefresh,
  HTTPValidationError,
  TokenSet,
} from '../models/index';
import {
    AuthDataBasicFromJSON,
    AuthDataBasicToJSON,
    AuthDataRefreshFromJSON,
    AuthDataRefreshToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TokenSetFromJSON,
    TokenSetToJSON,
} from '../models/index';

export interface LoginAuthPostRequest {
    authDataBasic: AuthDataBasic;
}

export interface RefreshLoginAuthRefreshPostRequest {
    authDataRefresh: AuthDataRefresh;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Получить JWT токен по логину и паролю
     */
    async loginAuthPostRaw(requestParameters: LoginAuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenSet>> {
        if (requestParameters['authDataBasic'] == null) {
            throw new runtime.RequiredError(
                'authDataBasic',
                'Required parameter "authDataBasic" was null or undefined when calling loginAuthPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthDataBasicToJSON(requestParameters['authDataBasic']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenSetFromJSON(jsonValue));
    }

    /**
     * Получить JWT токен по логину и паролю
     */
    async loginAuthPost(requestParameters: LoginAuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenSet> {
        const response = await this.loginAuthPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить JWT токен по refresh-токену
     */
    async refreshLoginAuthRefreshPostRaw(requestParameters: RefreshLoginAuthRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenSet>> {
        if (requestParameters['authDataRefresh'] == null) {
            throw new runtime.RequiredError(
                'authDataRefresh',
                'Required parameter "authDataRefresh" was null or undefined when calling refreshLoginAuthRefreshPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthDataRefreshToJSON(requestParameters['authDataRefresh']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenSetFromJSON(jsonValue));
    }

    /**
     * Получить JWT токен по refresh-токену
     */
    async refreshLoginAuthRefreshPost(requestParameters: RefreshLoginAuthRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenSet> {
        const response = await this.refreshLoginAuthRefreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
