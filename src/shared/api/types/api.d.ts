/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Получить JWT токен по логину и паролю */
    post: operations['login_auth_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/refresh': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Получить JWT токен по refresh-токену */
    post: operations['refresh_login_auth_refresh_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить данные своего профиля */
    get: operations['get_profile_profile_get']
    put?: never
    /** Создать профиль */
    post: operations['register_profile_post']
    /** Удалить профиль */
    delete: operations['delete_profile_profile_delete']
    options?: never
    head?: never
    /** Редактировать свой профиль */
    patch: operations['edit_profile_profile_patch']
    trace?: never
  }
  '/profile/photo': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Установить фото профиля */
    put: operations['set_profile_photo_profile_photo_put']
    post?: never
    /** Удалить фото профиля */
    delete: operations['delete_profile_photo_profile_photo_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Найти пользователя по запросу */
    get: operations['get_users_by_query_users_search_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/{user_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить профиль пользователя по его user_id */
    get: operations['get_user_by_id_users__user_id__get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/{user_id}/sendMessage': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Отправить сообщение пользователю */
    post: operations['send_message_to_user_users__user_id__sendMessage_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/private': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить список своих приватных чатов */
    get: operations['get_my_chats_private_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/private/{chat_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить информацию о приватном чате */
    get: operations['get_chat_by_id_private__chat_id__get']
    put?: never
    post?: never
    /** Удалить приватный чат */
    delete: operations['delete_chat_by_id_private__chat_id__delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/private/{chat_id}/messages': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить сообщения из приватного чата */
    get: operations['get_messages_from_chat_private__chat_id__messages_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/servers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить список серверов, в которых состоит текущий пользователь */
    get: operations['get_my_servers_servers_get']
    put?: never
    /** Создать сервер */
    post: operations['create_server_servers_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/servers/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Поиск серверов по запросу */
    get: operations['search_server_servers_search_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/servers/{server_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить информацию о сервере */
    get: operations['get_server_info_servers__server_id__get']
    put?: never
    post?: never
    /** Удалить сервер */
    delete: operations['delete_server_servers__server_id__delete']
    options?: never
    head?: never
    /** Редактировать сервер */
    patch: operations['edit_server_servers__server_id__patch']
    trace?: never
  }
  '/servers/{server_id}/logo': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Установить логотип сервера */
    put: operations['set_server_logo_servers__server_id__logo_put']
    post?: never
    /** Удалить логотип сервера */
    delete: operations['delete_server_logo_servers__server_id__logo_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/servers/{server_id}/getMembers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить список пользователей сервера */
    get: operations['get_server_members_servers__server_id__getMembers_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/servers/{server_id}/join': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Присоединиться к серверу */
    post: operations['join_to_channel_servers__server_id__join_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/servers/{server_id}/invite': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Пригласить пользователя на сервер */
    post: operations['invite_user_to_channel_servers__server_id__invite_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/servers/{server_id}/getChannels': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить список текстовых каналов на сервере */
    get: operations['get_server_channels_servers__server_id__getChannels_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/channels': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Создать текстовый канал */
    post: operations['create_channel_channels_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/channels/{channel_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить информацию о текстовом канале */
    get: operations['get_channel_info_channels__channel_id__get']
    put?: never
    post?: never
    /** Удалить текстовый канал */
    delete: operations['delete_channel_channels__channel_id__delete']
    options?: never
    head?: never
    /** Редактировать текстовый канал */
    patch: operations['edit_channel_channels__channel_id__patch']
    trace?: never
  }
  '/channels/{channel_id}/logo': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Установить логотип канала */
    put: operations['set_channel_logo_channels__channel_id__logo_put']
    post?: never
    /** Удалить логотип канала */
    delete: operations['delete_channel_logo_channels__channel_id__logo_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/channels/{channel_id}/sendMessage': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Отправить сообщение в текстовый канал */
    post: operations['send_message_to_channel_channels__channel_id__sendMessage_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/channels/{channel_id}/messages': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить сообщения из текстового канала */
    get: operations['get_messages_from_chat_channels__channel_id__messages_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/messages/getWS': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить веб-сокет для приёма новых сообщений */
    get: operations['get_message_ws_messages_getWS_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/messages/{message_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить сообщение по ID */
    get: operations['get_message_by_id_messages__message_id__get']
    put?: never
    post?: never
    /** Удалить сообщение по ID */
    delete: operations['delete_message_by_id_messages__message_id__delete']
    options?: never
    head?: never
    /** Редактировать сообщение по ID */
    patch: operations['edit_message_by_id_messages__message_id__patch']
    trace?: never
  }
  '/files': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Загрузить файл на сервер */
    post: operations['upload_file_to_server_files_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/files/{file_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить информацию о файле по file_id */
    get: operations['get_file_info_files__file_id__get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/files/download/{download_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Скачать файл по его download_id */
    get: operations['get_file_files_download__download_id__get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Mainpage */
    get: operations['mainpage_domain_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /**
     * Attachment
     * @description Dataclass with attachment data
     *
     *     attach types:
     *     - file
     *     - media
     */
    Attachment: {
      /**
       * Message Id
       * Format: uuid
       */
      message_id: string
      /** Attach Type */
      attach_type: string
      file: components['schemas']['File']
    }
    /** AttachmentCreate */
    AttachmentCreate: {
      /** Attach Type */
      attach_type: string
      /**
       * File Id
       * Format: uuid
       */
      file_id: string
    }
    /**
     * AuthDataBasic
     * @description scheme for validating user login request data
     */
    AuthDataBasic: {
      /** Username */
      username: string
      /** Password */
      password: string
    }
    /**
     * AuthDataRefresh
     * @description scheme for validating user login request data
     */
    AuthDataRefresh: {
      /** Refresh */
      refresh: string
    }
    /** Body_set_channel_logo_channels__channel_id__logo_put */
    Body_set_channel_logo_channels__channel_id__logo_put: {
      /**
       * Logo
       * Format: binary
       */
      logo: string
    }
    /** Body_set_profile_photo_profile_photo_put */
    Body_set_profile_photo_profile_photo_put: {
      /**
       * Photo
       * Format: binary
       */
      photo: string
    }
    /** Body_set_server_logo_servers__server_id__logo_put */
    Body_set_server_logo_servers__server_id__logo_put: {
      /**
       * Logo
       * Format: binary
       */
      logo: string
    }
    /** Body_upload_file_to_server_files_post */
    Body_upload_file_to_server_files_post: {
      /**
       * File
       * Format: binary
       */
      file: string
    }
    /**
     * Channel
     * @description Datamodel with test channel data
     */
    Channel: {
      /**
       * Channel Id
       * Format: uuid
       */
      channel_id: string
      /**
       * Server Id
       * Format: uuid
       */
      server_id: string
      /** Title */
      title: string
      /** Description */
      description?: string | null
      logo?: components['schemas']['File'] | null
      /**
       * Created At
       * Format: date-time
       */
      created_at: string
    }
    /** ChannelCreate */
    ChannelCreate: {
      /**
       * Server Id
       * Format: uuid
       */
      server_id: string
      /** Title */
      title: string
      /** Description */
      description?: string | null
    }
    /**
     * ChannelMessage
     * @description Dataclass with channel message data
     *
     *     *sequence is a serial number of the message in the text channel
     */
    ChannelMessage: {
      message: components['schemas']['Message']
      /**
       * Channel Id
       * Format: uuid
       */
      channel_id: string
      /** Sequence */
      sequence: number
    }
    /** ChannelUpdate */
    ChannelUpdate: {
      /** Title */
      title?: string | null
      /** Description */
      description?: string | null
    }
    /**
     * File
     * @description Datamodel with file data
     */
    File: {
      /**
       * File Id
       * Format: uuid
       */
      file_id: string
      /**
       * Download Id
       * Format: uuid
       */
      download_id: string
      /** Size */
      size: number
      /** Hash */
      hash: string
      /** Mime Type */
      mime_type: string
      /**
       * Upload At
       * Format: date-time
       */
      upload_at: string
    }
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][]
    }
    /**
     * Message
     * @description Datamodel with message data
     *
     *     Message is independent entity.
     *     In future message can be a part of a channel message or a private message.
     */
    Message: {
      /**
       * Message Id
       * Format: uuid
       */
      message_id: string
      /**
       * Author Id
       * Format: uuid
       */
      author_id: string
      /** Content */
      content?: string | null
      /** Attachments */
      attachments?: components['schemas']['Attachment'][] | null
      /** Reply Message Id */
      reply_message_id?: string | null
      /** Updated At */
      updated_at?: string | null
      /**
       * Created At
       * Format: date-time
       */
      created_at: string
    }
    /** MessageCreate */
    MessageCreate: {
      /** Content */
      content?: string | null
      /** Reply Message Id */
      reply_message_id?: string | null
      /** Attachments */
      attachments?: components['schemas']['AttachmentCreate'][] | null
    }
    /** MessageUpdate */
    MessageUpdate: {
      /** Content */
      content?: string | null
    }
    /**
     * PrivateChat
     * @description Dataclass with private chat data
     *
     *     *there can be only two members
     */
    PrivateChat: {
      /**
       * Chat Id
       * Format: uuid
       */
      chat_id: string
      /** Members */
      members: components['schemas']['User'][]
    }
    /**
     * PrivateMessage
     * @description Dataclass with channel message data
     *
     *     *sequence is a serial number of the message in the private chat
     */
    PrivateMessage: {
      message: components['schemas']['Message']
      /**
       * Chat Id
       * Format: uuid
       */
      chat_id: string
      /** Sequence */
      sequence: number
    }
    /**
     * Server
     * @description Datamodel with server data
     */
    Server: {
      /**
       * Server Id
       * Format: uuid
       */
      server_id: string
      /**
       * Owner Id
       * Format: uuid
       */
      owner_id: string
      /** Title */
      title: string
      /** Description */
      description?: string | null
      logo?: components['schemas']['File'] | null
      /**
       * Created At
       * Format: date-time
       */
      created_at: string
    }
    /** ServerCreate */
    ServerCreate: {
      /** Title */
      title: string
      /** Description */
      description?: string | null
    }
    /** ServerUpdate */
    ServerUpdate: {
      /** Title */
      title?: string | null
      /** Description */
      description?: string | null
    }
    /**
     * TokenSet
     * @description scheme for validating user login request data
     */
    TokenSet: {
      /** Access */
      access: string
      /** Refresh */
      refresh: string
    }
    /**
     * User
     * @description Datamodel with user profile data
     */
    User: {
      /**
       * User Id
       * Format: uuid
       */
      user_id: string
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Tag */
      tag: string
      /** Birthdate */
      birthdate?: string | null
      photo?: components['schemas']['File'] | null
    }
    /** UserCreate */
    UserCreate: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Birthdate */
      birthdate?: string | null
      /** Tag */
      tag?: string | null
      /** Username */
      username: string
      /** Password */
      password: string
    }
    /** UserInvite */
    UserInvite: {
      /**
       * User Id
       * Format: uuid
       */
      user_id: string
    }
    /** UserUpdate */
    UserUpdate: {
      /** Name */
      name?: string | null
      /** Description */
      description?: string | null
      /** Birthdate */
      birthdate?: string | null
      /** Tag */
      tag?: string | null
    }
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  login_auth_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuthDataBasic']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TokenSet']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  refresh_login_auth_refresh_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuthDataRefresh']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TokenSet']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_profile_profile_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
    }
  }
  register_profile_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  delete_profile_profile_delete: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  edit_profile_profile_patch: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  set_profile_photo_profile_photo_put: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_set_profile_photo_profile_photo_put']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  delete_profile_photo_profile_photo_delete: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  get_users_by_query_users_search_get: {
    parameters: {
      query: {
        prompt: string
        count?: number | null
        offset?: number | null
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User'][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_user_by_id_users__user_id__get: {
    parameters: {
      query?: never
      header?: never
      path: {
        user_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  send_message_to_user_users__user_id__sendMessage_post: {
    parameters: {
      query?: never
      header?: never
      path: {
        user_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_my_chats_private_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrivateChat'][]
        }
      }
    }
  }
  get_chat_by_id_private__chat_id__get: {
    parameters: {
      query?: never
      header?: never
      path: {
        chat_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrivateChat']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  delete_chat_by_id_private__chat_id__delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        chat_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_messages_from_chat_private__chat_id__messages_get: {
    parameters: {
      query: {
        sequence: number
        count?: number | null
      }
      header?: never
      path: {
        chat_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrivateMessage'][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_my_servers_servers_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Server'][]
        }
      }
    }
  }
  create_server_servers_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ServerCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Server']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  search_server_servers_search_get: {
    parameters: {
      query: {
        prompt: string
        offset?: number | null
        count?: number | null
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Server'][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_server_info_servers__server_id__get: {
    parameters: {
      query?: never
      header?: never
      path: {
        server_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Server']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  delete_server_servers__server_id__delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        server_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  edit_server_servers__server_id__patch: {
    parameters: {
      query?: never
      header?: never
      path: {
        server_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ServerUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Server']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  set_server_logo_servers__server_id__logo_put: {
    parameters: {
      query?: never
      header?: never
      path: {
        server_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_set_server_logo_servers__server_id__logo_put']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  delete_server_logo_servers__server_id__logo_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        server_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_server_members_servers__server_id__getMembers_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        server_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User'][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  join_to_channel_servers__server_id__join_post: {
    parameters: {
      query?: never
      header?: never
      path: {
        server_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  invite_user_to_channel_servers__server_id__invite_post: {
    parameters: {
      query?: never
      header?: never
      path: {
        server_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserInvite']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_server_channels_servers__server_id__getChannels_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        server_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Channel'][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  create_channel_channels_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ChannelCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Channel']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_channel_info_channels__channel_id__get: {
    parameters: {
      query?: never
      header?: never
      path: {
        channel_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Channel']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  delete_channel_channels__channel_id__delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        channel_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  edit_channel_channels__channel_id__patch: {
    parameters: {
      query?: never
      header?: never
      path: {
        channel_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ChannelUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Channel']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  set_channel_logo_channels__channel_id__logo_put: {
    parameters: {
      query?: never
      header?: never
      path: {
        channel_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_set_channel_logo_channels__channel_id__logo_put']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  delete_channel_logo_channels__channel_id__logo_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        channel_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  send_message_to_channel_channels__channel_id__sendMessage_post: {
    parameters: {
      query?: never
      header?: never
      path: {
        channel_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_messages_from_chat_channels__channel_id__messages_get: {
    parameters: {
      query?: {
        sequence?: number | null
        count?: number | null
      }
      header?: never
      path: {
        channel_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ChannelMessage'][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_message_ws_messages_getWS_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  get_message_by_id_messages__message_id__get: {
    parameters: {
      query?: never
      header?: never
      path: {
        message_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Message']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  delete_message_by_id_messages__message_id__delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        message_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  edit_message_by_id_messages__message_id__patch: {
    parameters: {
      query?: never
      header?: never
      path: {
        message_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  upload_file_to_server_files_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_file_to_server_files_post']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['File']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_file_info_files__file_id__get: {
    parameters: {
      query?: never
      header?: never
      path: {
        file_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['File']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_file_files_download__download_id__get: {
    parameters: {
      query?: never
      header?: never
      path: {
        download_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/octet-stream': unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  mainpage_domain_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
}
